// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AppCheckScopes   = "AppCheck.Scopes"
	AuthBearerScopes = "AuthBearer.Scopes"
)

// CreateTaskInput defines model for CreateTaskInput.
type CreateTaskInput struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Following defines model for Following.
type Following struct {
	ApprovedAt  *time.Time `json:"approvedAt,omitempty"`
	IsFollowed  bool       `json:"isFollowed"`
	RequestedAt *time.Time `json:"requestedAt,omitempty"`
	User        User       `json:"user"`
}

// Task defines model for Task.
type Task struct {
	ArchivedAt  *time.Time         `json:"archivedAt,omitempty"`
	CompletedAt *time.Time         `json:"completedAt,omitempty"`
	CreatedAt   time.Time          `json:"createdAt"`
	DeletedAt   *time.Time         `json:"deletedAt,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Owner       User               `json:"owner"`
	Pool        *TaskPool          `json:"pool,omitempty"`
	Title       string             `json:"title"`
	Url         string             `json:"url"`
}

// TaskPool defines model for TaskPool.
type TaskPool struct {
	Id    openapi_types.UUID `json:"id"`
	Owner User               `json:"owner"`
	Tasks []Task             `json:"tasks"`
}

// UpdateTaskInput defines model for UpdateTaskInput.
type UpdateTaskInput struct {
	ArchivedAt  *time.Time `json:"archivedAt,omitempty"`
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	Pool        *TaskPool  `json:"pool,omitempty"`
	Title       *string    `json:"title,omitempty"`
	Url         *string    `json:"url,omitempty"`
}

// UpdateUserInput defines model for UpdateUserInput.
type UpdateUserInput struct {
	DisplayName *string `json:"displayName,omitempty"`
	PhotoURL    *string `json:"photoURL,omitempty"`
}

// User defines model for User.
type User struct {
	DisplayName string             `json:"displayName"`
	Followings  []Following        `json:"followings"`
	Id          openapi_types.UUID `json:"id"`
	PhotoURL    string             `json:"photoURL"`
	Pools       []TaskPool         `json:"pools"`
}

// Id defines model for id.
type Id = openapi_types.UUID

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = Error

// NotFound defines model for NotFound.
type NotFound = Error

// TaskOK defines model for TaskOK.
type TaskOK = Task

// TaskPoolOK defines model for TaskPoolOK.
type TaskPoolOK = TaskPool

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UserOK defines model for UserOK.
type UserOK = User

// UpsertFCMToken defines model for UpsertFCMToken.
type UpsertFCMToken struct {
	Timestamp time.Time `json:"timestamp"`
	Token     string    `json:"token"`
}

// UpsertFCMTokenJSONBody defines parameters for UpsertFCMToken.
type UpsertFCMTokenJSONBody struct {
	Timestamp time.Time `json:"timestamp"`
	Token     string    `json:"token"`
}

// UpsertFCMTokenJSONRequestBody defines body for UpsertFCMToken for application/json ContentType.
type UpsertFCMTokenJSONRequestBody UpsertFCMTokenJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskInput

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTaskInput

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upsert FCM Token
	// (PATCH /fcm/token)
	UpsertFCMToken(c *gin.Context)
	// Get Pools
	// (GET /pools)
	GetPools(c *gin.Context)
	// Create Pool
	// (POST /pools)
	CreatePool(c *gin.Context)
	// Delete Pool
	// (DELETE /pools/{id})
	DeletePool(c *gin.Context, id Id)
	// Get Pool
	// (GET /pools/{id})
	GetPool(c *gin.Context, id Id)
	// Get Tasks
	// (GET /tasks)
	GetTasks(c *gin.Context)
	// Create Task
	// (POST /tasks)
	CreateTask(c *gin.Context)
	// Delete Task
	// (DELETE /tasks/{id})
	DeleteTask(c *gin.Context, id Id)
	// Get Task
	// (GET /tasks/{id})
	GetTask(c *gin.Context, id Id)
	// Update Task
	// (PATCH /tasks/{id})
	UpdateTask(c *gin.Context, id Id)
	// Get Users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Create User
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete User
	// (DELETE /users/{id})
	DeleteUser(c *gin.Context, id Id)
	// Get User
	// (GET /users/{id})
	GetUser(c *gin.Context, id Id)
	// Update User
	// (PATCH /users/{id})
	UpdateUser(c *gin.Context, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UpsertFCMToken operation middleware
func (siw *ServerInterfaceWrapper) UpsertFCMToken(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpsertFCMToken(c)
}

// GetPools operation middleware
func (siw *ServerInterfaceWrapper) GetPools(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPools(c)
}

// CreatePool operation middleware
func (siw *ServerInterfaceWrapper) CreatePool(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePool(c)
}

// DeletePool operation middleware
func (siw *ServerInterfaceWrapper) DeletePool(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePool(c, id)
}

// GetPool operation middleware
func (siw *ServerInterfaceWrapper) GetPool(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPool(c, id)
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasks(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, id)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c, id)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c, id)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, id)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(AppCheckScopes, []string{})

	c.Set(AuthBearerScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PATCH(options.BaseURL+"/fcm/token", wrapper.UpsertFCMToken)
	router.GET(options.BaseURL+"/pools", wrapper.GetPools)
	router.POST(options.BaseURL+"/pools", wrapper.CreatePool)
	router.DELETE(options.BaseURL+"/pools/:id", wrapper.DeletePool)
	router.GET(options.BaseURL+"/pools/:id", wrapper.GetPool)
	router.GET(options.BaseURL+"/tasks", wrapper.GetTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.CreateTask)
	router.DELETE(options.BaseURL+"/tasks/:id", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/tasks/:id", wrapper.GetTask)
	router.PATCH(options.BaseURL+"/tasks/:id", wrapper.UpdateTask)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/users/:id", wrapper.UpdateUser)
}
